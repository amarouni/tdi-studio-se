<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
"
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String username = ElementParameterParser.getValue(node, "__USERNAME__");

String port = ElementParameterParser.getValue(node, "__PORT__");
String outputDirectory = ElementParameterParser.getValue(node, "__OUTPUT_DIRECTORY__");
String filenamePattern = ElementParameterParser.getValue(node, "__FILENAME_PATTERN__");
String allEmails = ElementParameterParser.getValue(node, "__ALL_EMAILS__");
String maxEmails = ElementParameterParser.getValue(node, "__MAX_EMAILS__");
boolean bDeleteFromServer = "true".equals(ElementParameterParser.getValue(node, "__DELETE_FROM_SERVER__"));
String protocol = ElementParameterParser.getValue(node, "__PROTOCOL__");
List<Map<String, String>> filterList = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__ADVANCED_FILTER__");
String condition = ElementParameterParser.getValue(node, "__FILTER_RELATION__");
boolean useSSL = "true".equals(ElementParameterParser.getValue(node, "__USE_SSL__"));
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
%>
	<%@ include file="SearchTerms.javajet"%>

	String server_<%=cid %> = <%=host %>;
	String mbox_<%=cid%> = "INBOX";
	String user_<%=cid %> = <%=username %>;
	
    <%
    String passwordFieldName = "__PASSWORD__";
    %>
    
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

	String password_<%=cid %> = decryptedPassword_<%=cid%>;
	int port_<%=cid %> = <%=port %>;
	int nb_email_<%=cid %> = 0;
	javax.mail.Folder folder_<%=cid %>;
	javax.mail.Session session_<%=cid %>;
	javax.mail.Store store_<%=cid %>;
	javax.mail.URLName url_<%=cid %>;
	java.util.Properties props_<%=cid %>;

	try {
  		props_<%=cid %> = System.getProperties();
	} catch (SecurityException sex) {
		<%if(isLog4jEnabled){%>
			log.warn("<%=cid%> - " + sex.getMessage());
		<%}%>
  		props_<%=cid %> = new java.util.Properties();
	}
<%
	if (useSSL) {
		if ("pop3".equals(protocol)){
  %>
		    java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
		    props_<%=cid %>.setProperty("mail.pop3.socketFactory.class", "javax.net.ssl.SSLSocketFactory");      
		    props_<%=cid %>.setProperty("mail.pop3.socketFactory.fallback", "false");
		    props_<%=cid %>.setProperty("mail.pop3.socketFactory.port", port_<%=cid %> + "");
  <%
		} else {
  %>
		    java.security.Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
		    props_<%=cid %>.setProperty("mail.imap.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		    props_<%=cid %>.setProperty("mail.imap.socketFactory.fallback", "false");
		    props_<%=cid %>.setProperty("mail.imap.socketFactory.port", port_<%=cid %> + "");    
  <%
		}
	}

	if ("pop3".equals(protocol)){
%>
  		session_<%=cid %> = javax.mail.Session.getInstance(props_<%=cid %>, null);
  		store_<%=cid %> = session_<%=cid %>.getStore("<%=protocol%>");
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection attempt to '" + server_<%=cid %> + "' as '" + user_<%=cid %> + "'.");
		<%}%>
  		store_<%=cid %>.connect(server_<%=cid %>, port_<%=cid %>, user_<%=cid %>, password_<%=cid %>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to '" + server_<%=cid %> + "' has succeeded.");
		<%}%>
  		folder_<%=cid %> = store_<%=cid %>.getDefaultFolder();

  		if (folder_<%=cid %> == null) {
    		throw new RuntimeException("No default folder");
  		}
		// its INBOX
		folder_<%=cid %> = folder_<%=cid %>.getFolder(mbox_<%=cid%>);

  		if (folder_<%=cid %> == null){
		    throw new RuntimeException("No POP3 INBOX");
		}
<%
	} else {
		if ("true".equals(ElementParameterParser.getValue(node, "__SPECIFY_MAIL_FOLDER__"))){
  %>
			mbox_<%=cid%> = <%=ElementParameterParser.getValue(node, "__MAIL_FOLDER__")%>;
  <%
		}
  %>
		url_<%=cid %> = new javax.mail.URLName("<%=protocol%>", server_<%=cid %>, -1, mbox_<%=cid%>, user_<%=cid %>, password_<%=cid %>);
		session_<%=cid %> = javax.mail.Session.getInstance(props_<%=cid %>, null);
		store_<%=cid %> = new com.sun.mail.imap.IMAPStore(session_<%=cid %>, url_<%=cid %>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection attempt to '" + server_<%=cid %> + "' as '" + user_<%=cid %> + "'.");
		<%}%>
  		store_<%=cid %>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connection to '" + server_<%=cid %> + "' has succeeded.");
		<%}%>
		folder_<%=cid %> = store_<%=cid %>.getFolder(mbox_<%=cid%>);
<%
	}
%> 

	try {
		folder_<%=cid %>.open(javax.mail.Folder.READ_WRITE);
		System.out.println("There are "+folder_<%=cid %>.getMessageCount()+" emails in your mail box.");
	} catch (java.lang.Exception e){
		<%if(isLog4jEnabled){%>
			log.warn("<%=cid%> - " + e.getMessage());
		<%}%>
		folder_<%=cid %>.open(javax.mail.Folder.READ_ONLY);
	}

		  java.util.List<javax.mail.search.SearchTerm> searchTermList_<%= cid %> = new java.util.ArrayList<javax.mail.search.SearchTerm>();
	      <%
	  			for (int i = 0;i < filterList.size(); i++) {
	  				String filterItem = filterList.get(i).get("FILTER_TIEM");
	  				String filterptn = filterList.get(i).get("PATTERN");

	  				if ("Subject".equals(filterItem)){
	               	        %>
		        			javax.mail.search.SearchTerm filter_<%= cid %>_<%= i %> = new SubjectFilter_<%= cid %>(<%= filterptn %>);
	               	        <%
	    			} else if ("From".equals(filterItem)) {
	               	        %>
		        			javax.mail.search.SearchTerm filter_<%= cid %>_<%= i %> = new FromFilter_<%= cid %>(<%= filterptn %>);
	               	        <%
	  				} else if ("To".equals(filterItem)) {
	               	        %>
		        			javax.mail.search.SearchTerm filter_<%= cid %>_<%= i %> = new ToFilter_<%= cid %>(<%= filterptn %>);
	               	        <%
	    			} else if("AfterDate".equalsIgnoreCase(filterItem)){
	               	        %>
		        			javax.mail.search.SearchTerm filter_<%= cid %>_<%= i %> = new AfterDateFilter_<%= cid %>(<%= filterptn %>);
	               	        <%
	  				}else if("BeforeDate".equalsIgnoreCase(filterItem)){
	               	        %>
		        			javax.mail.search.SearchTerm filter_<%= cid %>_<%= i %> = new BeforeDateFilter_<%= cid %>(<%= filterptn %>);
	               	        <%
	  				}else{
		  					%>
		  					System.err.println("Unsupported compare term.");
		  					<%
	  				}
			  				%>
			  				   searchTermList_<%= cid %>.add(filter_<%= cid %>_<%= i %>);
			  				<%
	  			}
	  			%>
	  			    javax.mail.search.SearchTerm[] searchTArr_<%= cid %> = new javax.mail.search.SearchTerm[searchTermList_<%= cid %>.size()];
	  			<% 
			    	if("&&".equals(condition)){
	  			    	%>
	  			    	 javax.mail.search.AndTerm  term_<%= cid %> = new javax.mail.search.AndTerm(searchTermList_<%= cid %>.toArray(searchTArr_<%= cid %>));
	  			    	<%
			    	}else if("||".equals(condition)){
	  			    	%>
	  			    	 javax.mail.search.OrTerm  term_<%= cid %> = new javax.mail.search.OrTerm(searchTermList_<%= cid %>.toArray(searchTArr_<%= cid %>));
	  			    	<%
			    	}else{
			    		%>
			    		   System.err.println("Unsupported compare term.");
			    		<%
			    	}
	  			 %>
	  System.out.println("Executing the filter,it will take several minutes it depend on your network and mail size.");
	  javax.mail.Message[] msgs_<%= cid %> = folder_<%=cid %>.search(term_<%= cid %>);
	  javax.mail.FetchProfile fp_<%= cid %> = new javax.mail.FetchProfile();
	  fp_<%= cid %>.add(javax.mail.FetchProfile.Item.ENVELOPE);
	  folder_<%=cid %>.fetch(msgs_<%= cid %>, fp_<%= cid %>);

	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Retrieving mails from server.");
	<%}%>

	System.out.println("Begin to download mail.");
	for (int counter_<%=cid %> = 0; counter_<%=cid %> < msgs_<%=cid %>.length; counter_<%=cid %>++) {
		<%if ("false".equals(allEmails)) {%>
			if(nb_email_<%=cid%> >= <%=maxEmails%>) break; 
		<% } %>

		javax.mail.Message message_<%=cid %> = msgs_<%=cid %>[counter_<%=cid %>];  
		try {
    		<% if (bDeleteFromServer){ %> 
     			message_<%=cid %>.setFlag(javax.mail.Flags.Flag.DELETED, true);//Pop3 not support
    		<% } %>
			    String filename_<%=cid %> = <%=filenamePattern %>;
			    java.io.File file_<%=cid %> = new java.io.File(<%=outputDirectory %>, filename_<%=cid %>);
			    java.io.OutputStream os_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>);
			    message_<%=cid %>.writeTo(os_<%=cid %>);
			    os_<%=cid %>.close();
			    nb_email_<%=cid %>++;
			    globalMap.put("<%=cid %>_CURRENT_FILE", filename_<%=cid %>);
			    globalMap.put("<%=cid %>_CURRENT_FILEPATH", file_<%=cid %>.getAbsolutePath());
