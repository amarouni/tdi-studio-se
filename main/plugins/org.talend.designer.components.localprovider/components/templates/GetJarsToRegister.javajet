<%@ jet 
%>
		class GetJarsToRegister_<%=cid%> {
			private String oozieClasspathLine;
			private boolean isOozieRuntime;
			
			public GetJarsToRegister_<%=cid%>() {
				try {
					this.isOozieRuntime = setJarsToRegister("../../job.xml");
				} catch (java.lang.Exception e) {
					e.printStackTrace();
					<%if(isLog4jEnabled) {%>
					log.error("<%=cid%> - " + e.getMessage());
					<%}%>
				}
			}
		
			public boolean setJarsToRegister(String filename) throws IOException, org.dom4j.DocumentException {
				String jobXmlPath = new java.io.File(filename).getCanonicalPath();
				if(isNeedAddLibsPath(jobXmlPath)) {
					
					org.dom4j.io.SAXReader reader_oozie = new org.dom4j.io.SAXReader();
					org.dom4j.Document document_oozie = reader_oozie.read(jobXmlPath);
					List list_oozie = document_oozie.selectNodes("/configuration/property");
					for (java.util.Iterator iter_oozie = list_oozie.iterator(); iter_oozie.hasNext();) {
						org.dom4j.Element element_oozie = (org.dom4j.Element) iter_oozie.next();
						String name_oozie = element_oozie.elementText("name");
						if(name_oozie.equals("mapred.cache.localFiles")) {
							this.oozieClasspathLine = element_oozie.elementText("value");
							return true;
						}
					}
				}
				return false;
			}
			
			public String replaceJarPaths(String originalClassPathLine) throws Exception {
				String classPathLine = "";
				String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
				
				if (isNeedAddLibsPath(crcMapPath)) {
					java.util.Map<String, String> crcMap = null;
					java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
					crcMap = (java.util.Map<String, String>) ois.readObject();
					ois.close();
					classPathLine = addLibsPath(originalClassPathLine, crcMap);
				} else if(this.isOozieRuntime) {
					if(this.oozieClasspathLine!=null) {
						List<String> oozieJars = java.util.Arrays.asList(this.oozieClasspathLine.split(","));
						for(int j=0; j<oozieJars.size(); j++) {
							if(oozieJars.get(j).contains(originalClassPathLine.substring(originalClassPathLine.lastIndexOf("/")))) {
								classPathLine = oozieJars.get(j);
								break;
							}
						}
					}
				} else {
					classPathLine = originalClassPathLine;
				}
				return classPathLine;
			}
		
			private boolean isNeedAddLibsPath(String crcMapPath) {
				if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
					return false;
				}
				return true;
			}
		
		
			private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
				for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
					line = adaptLibPaths(line, entry);
				}
				return line;
			}
		
			private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
				String jarName = entry.getValue();
				String crc = entry.getKey();
				String libStringFinder = "../lib/" + jarName;
				if (line.contains(libStringFinder)) {
					line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
				} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
					line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
				} else if (line.contains(";" + jarName + ";")) {
					line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
				}
				return line;
			}
		
		}