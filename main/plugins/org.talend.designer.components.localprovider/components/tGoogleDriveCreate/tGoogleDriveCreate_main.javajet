<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.NodeParamsHelper
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
NodeParamsHelper helper = new NodeParamsHelper(node);

String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
String accessToken = helper.getStringParam("__ACCESS_TOKEN__");
String folderID = helper.getStringParam("__FOLDERID__");
boolean useProxy = helper.getBoolParam("__USE_PROXY__");
boolean useSSL = helper.getBoolParam("__USE_SSL__");

String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
String connectionKey = "\"conn_" + connection+"\"";

List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
String dataOutputConnection = null;	
    for(IConnection conn : outputConnections) {
        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        	dataOutputConnection = conn.getName();
        	break;
        } // if(conn) end
    } // for(conns) end


String folderId = ElementParameterParser.getValue(node, "__FOLDER_ID__");
String newFolderName = ElementParameterParser.getValue(node, "__NEW_FOLDER_NAME__");

boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
%>
com.google.api.services.drive.Drive <%=cid%>_client;
<%
if(!"true".equals(useExistingConn)){
%>
{
<%
if(useSSL) {
%>
 	javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory
	.getInstance(javax.net.ssl.TrustManagerFactory
			.getDefaultAlgorithm());

	java.io.FileInputStream fis = new java.io.FileInputStream(
			<%=helper.getStringParam("__SSL_TRUST_STORE__")%>);
	java.security.KeyStore ks = java.security.KeyStore
			.getInstance(java.security.KeyStore.getDefaultType());
	<%String passwordFieldName = "__SSL_TRUST_STORE_PASSWORD__";%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>                       
	ks.load(fis, decryptedPassword_<%=cid%>.toCharArray());
	fis.close();
	tmf.init(ks);
	javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(<%=helper.getStringParam("__SSL_ALGORITHM__")%>);
	sslContext.init(null, tmf.getTrustManagers(), new java.security.SecureRandom());
<%	
}
%>
com.google.api.client.http.HttpTransport httpTransport = new com.google.api.client.http.javanet.NetHttpTransport.Builder()
<%if(useProxy){
String proxyHost = helper.getStringParam("__PROXY_HOST__");
String proxyPort = helper.getStringParam("__PROXY_PORT__");
%>
		.setProxy(new java.net.Proxy(java.net.Proxy.Type.HTTP, java.net.InetSocketAddress.createUnresolved(<%=proxyHost%>, <%=proxyPort%>)))
<%}
  if(useSSL) {
%>
	.setSslSocketFactory(sslContext.getSocketFactory())
<%
  }
%>
	.build();

	com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential = new com.google.api.client.googleapis.auth.oauth2.GoogleCredential().setAccessToken(<%=accessToken%>);
	<%=cid%>_client = new  com.google.api.services.drive.Drive.Builder(httpTransport, new com.google.api.client.json.jackson2.JacksonFactory(), credential)
	.setApplicationName(<%=helper.getStringParam("__APPLICATION_NAME__")%>).build();
}	
<%
} else {
%>
	<%=cid%>_client = (com.google.api.services.drive.Drive)globalMap.get(<%=connectionKey%>);
<%}%>

	try
	{
		if(<%=folderId%> == null || "".equals(<%=folderId%>.trim()) )
		{
			throw new Exception("Folder id can not be null");
		}

        com.google.api.services.drive.model.File createdFolder = new com.google.api.services.drive.model.File();
		com.google.api.services.drive.model.File resultFile = new com.google.api.services.drive.model.File();
        createdFolder.setParents(java.util.Arrays.asList(new com.google.api.services.drive.model.ParentReference().setId(<%=folderId%>)));
        createdFolder.setMimeType("application/vnd.google-apps.folder"); 
    	createdFolder.setTitle(<%=newFolderName%>); 

        resultFile = <%=cid%>_client.files().insert(createdFolder).execute();
        <%
		if(dataOutputConnection != null) {
        %>
			<%=dataOutputConnection%>.parentFolderID = <%=folderId%>;
			<%=dataOutputConnection%>.newFolderID =  resultFile.getId();
        <%}%>
		globalMap.put("<%=cid%>_PARENTFOLDERID", <%=folderId%>);
		globalMap.put("<%=cid%>_NEWFOLDERID", resultFile.getId());
	}
	catch (java.lang.Exception e)
	{
<%
		if(dieOnError) {
%>
			throw e;
<%
		} else {
%>
			System.err.println(e);
<%
		}
%>
	}
			