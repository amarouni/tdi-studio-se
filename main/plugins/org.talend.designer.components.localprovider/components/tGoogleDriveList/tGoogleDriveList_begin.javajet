<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.codegen.config.NodeParamsHelper
    java.util.List
    java.util.ArrayList
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
" 
%>

<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
NodeParamsHelper helper = new NodeParamsHelper(node);

String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
String accessToken = helper.getStringParam("__ACCESS_TOKEN__");
String folderID = helper.getStringParam("__FOLDERID__");
boolean useProxy = helper.getBoolParam("__USE_PROXY__");
boolean useSSL = helper.getBoolParam("__USE_SSL__");

String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
String connectionKey = "\"conn_" + connection+"\"";

List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();
		
String dataOutputConnection = null;	
    for(IConnection conn : outputConnections) {
        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
        	dataOutputConnection = conn.getName();
        	break;
        } // if(conn) end
    } // for(conns) end

if(!"true".equals(useExistingConn)){
if(useSSL) {
%>
 	javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory
	.getInstance(javax.net.ssl.TrustManagerFactory
			.getDefaultAlgorithm());

	java.io.FileInputStream fis = new java.io.FileInputStream(
			<%=helper.getStringParam("__SSL_TRUST_STORE__")%>);
	java.security.KeyStore ks = java.security.KeyStore
			.getInstance(java.security.KeyStore.getDefaultType());
	<%String passwordFieldName = "__SSL_TRUST_STORE_PASSWORD__";%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>                       
	ks.load(fis, decryptedPassword_<%=cid%>.toCharArray());
	fis.close();
	tmf.init(ks);
	javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(<%=helper.getStringParam("__SSL_ALGORITHM__")%>);
	sslContext.init(null, tmf.getTrustManagers(), new java.security.SecureRandom());
<%	
}
%>
com.google.api.client.http.HttpTransport httpTransport = new com.google.api.client.http.javanet.NetHttpTransport.Builder()
<%if(useProxy){
String proxyHost = helper.getStringParam("__PROXY_HOST__");
String proxyPort = helper.getStringParam("__PROXY_PORT__");
%>
		.setProxy(new java.net.Proxy(java.net.Proxy.Type.HTTP, java.net.InetSocketAddress.createUnresolved(<%=proxyHost%>, <%=proxyPort%>)))
<%}
  if(useSSL) {
%>
	.setSslSocketFactory(sslContext.getSocketFactory())
<%
  }
%>
	.build();

	com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential = new com.google.api.client.googleapis.auth.oauth2.GoogleCredential().setAccessToken(<%=accessToken%>);
	 com.google.api.services.drive.Drive <%=cid%>_client = new  com.google.api.services.drive.Drive.Builder(httpTransport, new com.google.api.client.json.jackson2.JacksonFactory(), credential)
	.setApplicationName(<%=helper.getStringParam("__APPLICATION_NAME__")%>).build();
	
<%
} else {
%>
	com.google.api.services.drive.Drive <%=cid%>_client = (com.google.api.services.drive.Drive)globalMap.get(<%=connectionKey%>);
<%}%>
    String parentPath = ""; 
    java.util.List<com.google.api.services.drive.model.File> result = new java.util.ArrayList<com.google.api.services.drive.model.File>();
    com.google.api.services.drive.Drive.Files.List request = <%=cid%>_client.files().list();
	<%
    if(folderID.startsWith("\"")){
		folderID = folderID.substring(1);
	}
	if(folderID.endsWith("\"")){
		folderID = folderID.substring(0, folderID.length() - 1);
    }
	if ("false".equals(helper.getStringParam("__INCLUDSUBDIR__"))) { %> //without subfolders
    do {
      try {
	  <%if ("BOTH".equals(helper.getStringParam("__LIST_MODE__"))) {%>
		    request.setQ("'<%=folderID%>' in parents");
      <%} else if ("FILES".equals(helper.getStringParam("__LIST_MODE__"))) {%>
            request.setQ("'<%=folderID%>' in parents and mimeType != 'application/vnd.google-apps.folder'");
      <%} else {%>
		    request.setQ("'<%=folderID%>' in parents and mimeType = 'application/vnd.google-apps.folder'");
      <%}%>
        com.google.api.services.drive.model.FileList files = request.execute();
        result.addAll(files.getItems());
        request.setPageToken(files.getNextPageToken());
      } catch (IOException e) {
        System.out.println("An error occurred: " + e);
        request.setPageToken(null);
      }
    } while (request.getPageToken() != null &&
             request.getPageToken().length() > 0);
   <%} else {%>
    java.util.List<String> subfolders = new java.util.ArrayList<String>(); 
	subfolders.add("<%=folderID%>");
	while (subfolders.size()>0) {
    do {
      try {
	  <%if ("DIRECTORIES".equals(helper.getStringParam("__LIST_MODE__"))) {%>
	  		    request.setQ("'"+subfolders.get(0)+"' in parents and mimeType = 'application/vnd.google-apps.folder'");
      <%} else {%>
			    request.setQ("'"+subfolders.get(0)+"' in parents"); // check all files and folders
      <%}%>
        com.google.api.services.drive.model.FileList files = request.execute();
		for (com.google.api.services.drive.model.File file : files.getItems()) {
		  if (file.getMimeType().equals("application/vnd.google-apps.folder")) {
			subfolders.add(file.getId());
          } 
          if (
			      "BOTH".equals("<%=helper.getStringParam("__LIST_MODE__")%>")
				 || (
				       "FILES".equals("<%=helper.getStringParam("__LIST_MODE__")%>")
					    &&
						!file.getMimeType().equals("application/vnd.google-apps.folder")
					) 
				 || (
				        "DIRECTORIES".equals("<%=helper.getStringParam("__LIST_MODE__")%>")
						 && 
						 file.getMimeType().equals("application/vnd.google-apps.folder")
					) 
		    )
		  {
			result.add(file);
		  }
 		}
        request.setPageToken(files.getNextPageToken());
      } catch (IOException e) {
        System.out.println("An error occurred: " + e);
        request.setPageToken(null);
      }
    } while (request.getPageToken() != null &&
             request.getPageToken().length() > 0);
    subfolders.remove(0);
	}
     
   <%}%>
	for (com.google.api.services.drive.model.File temp : result) {
<%if(dataOutputConnection != null){%>
			<%=dataOutputConnection%>.id = temp.getId();
			<%=dataOutputConnection%>.title = temp.getTitle();
			<%=dataOutputConnection%>.mimeType = temp.getMimeType;
			<%=dataOutputConnection%>.lastModified = temp.getModifiedDate();			
			<%=dataOutputConnection%>.size = temp.getFileSize();	
			<%=dataOutputConnection%>.selfLink = temp.getSelfLink();	
			<%=dataOutputConnection%>.parents = temp.getParents();			
<%}%>
			globalMap.put("<%=cid%>_ID",temp.getId());
			globalMap.put("<%=cid%>_TITLE",temp.getTitle());
			globalMap.put("<%=cid%>_MIMETYPE",temp.getMimeType());
			globalMap.put("<%=cid%>_LASTMODIFIED",temp.getModifiedDate());
			globalMap.put("<%=cid%>_SIZE",temp.getFileSize());
			globalMap.put("<%=cid%>_SELFLINK",temp.getSelfLink());
			globalMap.put("<%=cid%>_PARENTS",temp.getParents());
			try{


